import os
import uuid
import telebot
import random
from random import randint
import zipfile
from PIL import Image, ImageEnhance, ImageFilter
from io import BytesIO

# –í—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot("<6488073582:AAFD6MbpEMaJgRL1Zj1dBCxSKpSIa8AGEH4>")


@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üñº –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –£—Å–∞—Ç–æ–≥–æ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–∞!\n\n"
                                      "üöÄ –í –±—É–¥—É—â–µ–º –º—ã –±—É–¥–µ–º –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!\n\n"
                                      "‚ö†Ô∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ YouTube –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞ - https://www.youtube.com/@usaffiliate\n\n"
                                      "üì£ –¢–∞–∫–∂–µ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ Telegram –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞ - @mustage_affiliate\n\n"
                                      "üí¨ –ê –µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π, —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ –∏ –æ–¥–∏–Ω–æ–∫–æ –∏–ª–∏ –∂–µ —É —Ç–µ–±—è —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—É–∂–Ω—ã –æ—Ç–≤–µ—Ç—ã, —Ç–æ –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º telegram —á–∞—Ç–µ - https://t.me/+eMzWlE9neiY2ZjEy\n\n"
                                      "‚¨áÔ∏è –ß—Ç–æ–±—ã —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üñº –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
def unique_image(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 10):")
    bot.register_next_step_handler(message, lambda message: get_num_copies(message, chat_id))


def get_num_copies(message, chat_id):
    try:
        num_copies = int(message.text)
        if num_copies > 10 or num_copies <= 0:
            bot.send_message(chat_id, "üìù –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 10 –∫–æ–ø–∏–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ <= 10:")
            bot.register_next_step_handler(message, lambda message: get_num_copies(message, chat_id))
        else:
            bot.send_message(chat_id, "üì≤ –ü—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–æ —Å–∂–∞—Ç–∏–µ–º, —Ç.–µ. –Ω–µ —Ñ–∞–π–ª–æ–º, —Ç.–µ. \"–ë—ã—Å—Ç—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º\") –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:")
            bot.register_next_step_handler(message, lambda message: uniqueize_image(message, num_copies))
    except Exception as e:
        bot.send_message(chat_id, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {}".format(e))
        return send_main_menu(chat_id)


def uniqueize_image(message, num_copies):
    try:
        chat_id = message.chat.id
        # Check if the file size is larger than 5 MB
        if message.photo[-1].file_size > 5 * 1024 * 1024:
            bot.send_message(chat_id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 5 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å –º–µ–Ω—å—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
            return send_main_menu(chat_id)
        file_id = message.photo[-1].file_id
        file = bot.get_file(file_id)
        downloaded_file = bot.download_file(file.file_path)

        # Convert downloaded file to a PIL image
        image = Image.open(BytesIO(downloaded_file))

        # Apply median filter to the image
        image = image.filter(ImageFilter.MedianFilter(size=1))

        # Add noise to the image
        pixels = image.load()
        width, height = image.size
        for i in range(width):
            for j in range(height):
                r, g, b = pixels[i, j]
                pixels[i, j] = (r + randint(-10, 10), g + randint(-10, 10), b + randint(-10, 10))

        images = []
        # Create a copy of the image
        temp_image = image.copy()

        # Remove EXIF data (if present)
        exif_data = temp_image.getexif()
        if exif_data:
            temp_image.info.pop("exif")

        # Randomly adjust brightness, contrast, sharpness, and saturation
        brightness = random.uniform(-0.025, 0.025)
        contrast = random.uniform(-0.025, 0.025)
        sharpness = random.uniform(-0.025, 0.025)
        saturation = random.uniform(-0.025, 0.025)
        temp_image = ImageEnhance.Brightness(temp_image).enhance(1 + brightness)
        temp_image = ImageEnhance.Contrast(temp_image).enhance(1 + contrast)
        temp_image = ImageEnhance.Sharpness(temp_image).enhance(1 + sharpness)
        temp_image = ImageEnhance.Color(temp_image).enhance(1 + saturation)

        # Randomly resize the image
        scale = random.uniform(0.95, 1.05)
        new_width = int(temp_image.width * scale)
        new_height = int(temp_image.height * scale)
        temp_image = temp_image.resize((new_width, new_height), resample=Image.BICUBIC)

        # Save the modified image as a PNG file
        temp_filename = f"{uuid.uuid4()}.png"
        temp_image.save(temp_filename, format="PNG")
        images.append(temp_filename)

        # Create the remaining copies of the image
        for i in range(1, num_copies):
            temp_image = image.copy()
            if exif_data:
                temp_image.info.pop("exif")
            brightness = random.uniform(-0.025, 0.025)
            contrast = random.uniform(-0.025, 0.025)
            sharpness = random.uniform(-0.025, 0.025)
            saturation = random.uniform(-0.025, 0.025)
            temp_image = ImageEnhance.Brightness(temp_image).enhance(1 + brightness)
            temp_image = ImageEnhance.Contrast(temp_image).enhance(1 + contrast)
            temp_image = ImageEnhance.Sharpness(temp_image).enhance(1 + sharpness)
            temp_image = ImageEnhance.Color(temp_image).enhance(1 + saturation)
            scale = random.uniform(0.95, 1.05)
            new_width = int(temp_image.width * scale)
            new_height = int(temp_image.height * scale)
            temp_image = temp_image.resize((new_width, new_height), resample=Image.BICUBIC)
            temp_filename = f"{uuid.uuid4()}.png"
            temp_image.save(temp_filename, format="PNG")
            images.append(temp_filename)

        # Create a zip file and add the images to it
        zip_filename = f"{uuid.uuid4()}.zip"
        with zipfile.ZipFile(zip_filename, "w", zipfile.ZIP_DEFLATED) as zip_file:
            for filename in images:
                zip_file.write(filename)

        # Send the zip file to the user
        with open(zip_filename, "rb") as zip_file:
            bot.send_document(chat_id, zip_file)
            bot.send_message(chat_id,
                             "–ù—É–∂–Ω—ã –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∫—Ä–µ–æ—Å—ã? @mustage_portfolio - —Å–¥–ª–∞–µ–º –≤—Å–µ –≤ –ª—É—á—à–µ–º –≤–∏–¥–µ!\n\n"
                             "–ù—É–∂–Ω—ã –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è facebook? –ü–∏—à–∏ @usaffiliate")

        # Delete the temporary files
        for filename in images:
            os.remove(filename)
        os.remove(zip_filename)
    except Exception as e:
        bot.send_message(chat_id, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {}".format(e))
        return send_main_menu(chat_id)


def send_main_menu(chat_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üñº –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
    bot.send_message(chat_id, "–ß–µ–º —è –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å? –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏ —Ç—ã–∫–∞–π —Ç—É–¥–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ üòÑ", reply_markup=markup)


bot.polling()
